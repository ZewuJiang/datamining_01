# python
# DM: section 1 
import numpy as np
dataset_filename = "affinity_dataset.txt"
x = np.loadtxt(dataset_filename)
# print(x)

# first, how many rows contain our premise: that a person is buying apples
num_apple_purhases = 0
for sample in x:
	if sample[3] == 1:
		num_apple_purhases += 1

# print("{0} people bought apples".format(num_apple_purhases))
# print( str(num_apple_purhases) + " people bought apples")

from collections import defaultdict
valid_rules = defaultdict(int)
invalid_rules = defaultdict(int)
num_occurances = defaultdict(int)

n_samples, n_features = x.shape 

features = ['bread', 'mike', 'cheese', 'apple', 'banana']
# print(n_samples)
# print(n_features)

for sample in x:
	for premise in range(n_features):
		if sample[premise] == 0: continue
		num_occurances[premise] += 1
		for conclusion in range(n_features):
			if premise == conclusion: 
				continue
			if sample[conclusion] == 1:
				valid_rules[(premise, conclusion)] += 1
			else:
				invalid_rules[(premise, conclusion)] += 1

support = valid_rules

confidence = defaultdict(float)
for premise, conclusion in valid_rules.keys():
	confidence[(premise, conclusion)] = valid_rules[(premise, conclusion)] / num_occurances[premise]

def print_rule(premise, conclusion, support, confidence, features):
	premise_name = features[premise]
	conclusion_name = features[conclusion]
	print("Rule: if a person buys {0} they will also buy {1}".format(premise_name, conclusion_name))

	print(" - Support: {0}".format(support[(premise, conclusion)]))
	print(" - Confidence: {0:.3f}".format(confidence[(premise, conclusion)]))

# premise = 1
# conclusion = 4
# print_rule(premise, conclusion, support, confidence, features)

# from operator import itemgetter
# sorted_support = sorted(support.items(), key = itemgetter(1),reverse=True)


# for index in range(5):
# 	print("Rule #{0}".format(index + 1))
# 	premise, conclusion = sorted_support[index][0]
# 	print_rule(premise, conclusion, support, confidence, features)

from operator import itemgetter
sorted_confidence = sorted(confidence.items(), key = itemgetter(1),reverse=True)


for index in range(5):
	print("Rule #{0}".format(index + 1))
	premise, conclusion = sorted_confidence[index][0]
	print_rule(premise, conclusion, support, confidence, features)
  
